scalar Date
scalar JSON

"""
Different types of integrations, mainly useful for when fetching and displaying [Integration](#integration) and [IntegrationUser](#integrationuser) objects
"""
enum IntegrationType {
  GITHUB
  FIGMA
  TRELLO
  SLACK
  DISCORD
  GITLAB
  ZAPIER
  INTERCOM
  SENTRY
  EMAIL
  VANTA
  LINEAR
}

"""
Statuses for [WorkItem](#workitem) objects fall into a few different categories
"""
enum StatusType {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  ARCHIVED
}

"""
Whether to treat as an include or exclude filter
"""
enum StatusFilterType {
  INCLUDE
  EXCLUDE
}

"""
Different states that a code review request can be in
"""
enum CodeReviewRequestState {
  OPEN
  CLOSED
  MERGED
  LOCKED
}

"""
The status type of a [Roadmap](#roadmap) column
"""
enum RoadmapColumnStatusType {
  PAST
  PRESENT
  FUTURE
}

"""
Different types of activities
"""
enum ActivityType {
  CREATED
  STATUS_CHANGED
  LABELS_CHANGED
  IMPACT_CHANGED
  EFFORT_CHANGED
  ENTITIES_CHANGED
  MEMBERS_CHANGED
  IMPORTED
  DUPLICATED_TO
  DUPLICATED_FROM
  CREATED_FROM
  MENTIONED
  MENTIONED_IN_INTEGRATION
  HORIZON_CHANGED
  CODE_REVIEW_REQUEST_ADDED
  DEPENDENCY
  TITLE_CHANGED
  TODO_CHANGED
  STALE_ISSUE
  SPACES_CHANGED
  ROADMAPS_CHANGED
}

"""
The top level object describing the user or application's organization
"""
type Organization {
  id: ID!
  name: String!
  slug: String!
  spaces: [Space!]!
  users: [User!]!
  integrations: [Integration!]!
  integrationUsers: [IntegrationUser!]!
  applications: [Application!]!
  updatedAt: Date!
  createdAt: Date!
}

type Space {
  id: ID!
  key: String!
  name: String!
  slug: String!
  labels: [Label!]!
  statuses: [Status!]!
  private: Boolean!
  members: [User!]
  updatedAt: Date!
  createdAt: Date!
}

type Label {
  id: ID!
  color: String!
  name: String!
  updatedAt: Date!
  createdAt: Date!
}

type Status {
  id: ID!
  name: String!
  type: StatusType!
  default: Boolean!
  updatedAt: Date!
  createdAt: Date!
}

type User {
  id: ID!
  username: String!
  name: String
  avatar: String
  guest: Boolean!
  deactivated: Boolean!
  updatedAt: Date!
  createdAt: Date!
}

type Integration {
  id: ID!
  type: IntegrationType!
  domain: String
  updatedAt: Date!
  createdAt: Date!
}

type IntegrationUser {
  id: ID!
  type: IntegrationType!
  """
  The domain of a particular integration for systems like GitHub enterprise where each customer has a dedicated URL
  """
  domain: String
  """
  The ID of the user in the external system (such as Slack or GitHub)
  """
  externalId: String!
  """
  The name of the user in the external system (such as Slack or GitHub)
  """
  externalName: String!
  updatedAt: Date!
  createdAt: Date!
}

"""
Applications represent some service/code/etc that integrates with Kitemaker. You maybe even have one if you're reading these documents
"""
type Application {
  id: ID!
  name: String!
  updatedAt: Date!
  createdAt: Date!
}

"""
Actors are entities that do things like create work items, leave comments, etc. They can come in a number of flavors
"""
union Actor = User | Integration | IntegrationUser | Application

"""
Entities are the document-like types, like work items and initiatives
"""
union Entity = WorkItem | Initiative

"""
Comments can be made on either [WorkItem](#workitem) or [Initiative](#initiative) objects
"""
type Comment {
  id: ID!
  actor: Actor!
  body: String!
  """
  Comments in Kitemaker are threaded and the threadId identifies a set of comments in a single thread
  """
  threadId: String!
  entity: Entity!
  updatedAt: Date!
  createdAt: Date!
}

"""
Activities are found on either [WorkItem](#workitem) or [Initiative](#initiative) objects
"""
type Activity {
  id: ID!
  type: ActivityType!
  actor: Actor!
  """
  Details are properties specific to the type of activity.
  Note: this property should be considered a beta part of the API and is subject to change
  """
  details: JSON!
  entity: Entity!
  updatedAt: Date!
  createdAt: Date!
}

type WorkItem {
  id: ID!
  number: String!
  title: String!
  actor: Actor!
  """
  The description of a work item as a markdown-formatted string
  """
  description: String!
  status: Status!
  """
  Sort is a string that determines where in a particular status column a work item will appear
  """
  sort: String!
  space: Space!
  members: [User!]!
  watchers: [User!]!
  labels: [Label!]!
  comments: [Comment!]!
  activities: [Activity!]!
  initiatives: [Initiative!]!
  effort: String
  impact: String
  closedAt: Date
  archivedAt: Date
  updatedAt: Date!
  createdAt: Date!
}

type Person {
  id: ID!
  name: String!
  email: String
  company: Company
  externalId: String
  updatedAt: Date!
  createdAt: Date!
}

type Company {
  id: ID!
  name: String!
  domain: String
  updatedAt: Date!
  createdAt: Date!
}

type Insight {
  id: ID!
  actor: Actor!
  content: String!
  entities: [Entity!]!
  updatedAt: Date!
  createdAt: Date!
}

type Feedback {
  id: ID!
  number: String!
  actor: Actor!
  title: String!
  """
  The content of a feedback as a markdown-formatted string
  """
  content: String!
  company: Company
  person: Person
  owners: [User!]!
  tags: [Label!]!
  insights: [Insight!]!

  processed: Boolean!
  processedAt: Date
  updatedAt: Date!
  createdAt: Date!
}

type Initiative {
  id: ID!
  number: String!
  title: String!
  color: String!
  actor: Actor!
  """
  The description of an initiative as a markdown-formatted string
  """
  description: String!

  workItems: [WorkItem!]!
  comments: [Comment!]!
  activities: [Activity!]!
  watchers: [User!]!
  members: [User!]!
  labels: [Label!]!
  spaces: [Space!]!
  roadmapColumns: [RoadmapColumn!]!
  effort: String
  impact: String
  archivedAt: Date
  updatedAt: Date!
  createdAt: Date!
}

type Roadmap {
  id: ID!
  name: String!
  color: String!
  columns: [RoadmapColumn!]!
  createdAt: Date!
  updatedAt: Date!
}

type RoadmapColumn {
  id: ID!
  name: String!
  roadmap: Roadmap!
  columnType: RoadmapColumnStatusType!
  initiatives: [Initiative!]!
  createdAt: Date!
  updatedAt: Date!
}

type CodeReviewRequestDetails {
  number: String!
  url: String!
  title: String!
}

type CodeReviewRequestLink {
  name: String!
  url: String!
}

type CodeReviewRequest {
  id: ID!
  codeReviewType: IntegrationType!
  workItems: [WorkItem!]!
  state: CodeReviewRequestState!
  details: CodeReviewRequestDetails!
  links: [CodeReviewRequestLink!]!
  createdAt: Date!
  updatedAt: Date!
}

type WorkItemsQueryResult {
  workItems: [WorkItem!]!
  """
  An opaque string used for paging. Pass this string to the workItems query to iterate through the results a page at a time
  """
  cursor: String!
  """
  Indicates if more results are available (by requerying workItems, passing the cursor)
  """
  hasMore: Boolean!
}

type InitiativesQueryResult {
  initiatives: [Initiative!]!
  """
  An opaque string used for paging. Pass this string to the initiatives query to iterate through the results a page at a time
  """
  cursor: String!
  """
  Indicates if more results are available (by requerying initiatives, passing the cursor)
  """
  hasMore: Boolean!
}
type FeedbackQueryResult {
  feedback: [Feedback!]!
  """
  An opaque string used for paging. Pass this string to the initiatives query to iterate through the results a page at a time
  """
  cursor: String!
  """
  Indicates if more results are available (by requerying initiatives, passing the cursor)
  """
  hasMore: Boolean!
}

type RoadmapsQueryResult {
  roadmaps: [Roadmap!]!
}

type Query {
  """
  Fetch the main organization object. Useful for finding out which users, spaces, labels, statuses, etc. are available before fetching and manipulating work items, initiatives, and feedback
  """
  organization: Organization!
  """
  Fetch a space by key (e.g., 'ABC')
  """
  spaceByKey(key: String!): Space!
  """
  Fetch [WorkItem](#workitem) objects for a particular [Space](#space). This will return at most 50 work items at a time so use the paging facilities to fetch more results
  """
  workItems(
    spaceId: ID
    cursor: String
    count: Int
    statusFilter: StatusFilter
  ): WorkItemsQueryResult!

  """
  Fetch a single [WorkItem](#workitem) by ID
  """
  workItem(id: ID!): WorkItem!
  """
  Fetch a single [WorkItem](#workitem) by number (e.g., 'ABC-123')
  """
  workItemByNumber(number: String!): WorkItem!

  """
  Fetch [Initiative](#initiative) objects for a particular [Organization](#organization). This will return at most 50 initiatives at a time so use the paging facilities to fetch more results
  """
  initiatives(cursor: String, count: Int): InitiativesQueryResult!
  """
  Fetch a single [Initiative](#initiative) by ID
  """
  initiative(id: ID!): Initiative!
  """
  Fetch a single [Initiative](#initiative) by number (e.g. 'I-123')
  """
  initiativeByNumber(number: String): Initiative!

  """
  Fetches all [Roadmap](#roadmap) for the organization
  """
  roadmaps: RoadmapsQueryResult!

  ## TODO: Add adding and remoing initiatives

  """
  Fetch [Initiative](#initiative) objects for a particular [Organization](#organization). This will return at most 50 initiatives at a time so use the paging facilities to fetch more results
  """
  feedback(cursor: String, count: Int): FeedbackQueryResult!
  """
  Fetch a single [Initiative](#initiative) by ID
  """
  feedbackById(id: ID!): Feedback!
  """
  Fetch a single [Initiative](#initiative) by number (e.g. 'I-123')
  """
  feedbackByNumber(number: String): Feedback!
  """
  List all [Person](#person) for the organization
  """
  feedbackPersons: [Person!]!
  """
  List all [Company](#company) for the organization
  """
  feedbackCompanies: [Company!]!

  """
  Fetch a single [Comment](#comment) by ID
  """
  comment(id: ID!): Comment!
  """
  Fetch a code review request by URL
  """
  codeReviewRequest(url: String!): CodeReviewRequest!
}

input CreateWorkItemInput {
  title: String!
  """
  The [WorkItem](#workitem) object's description as a markdown-formatted string
  """
  description: String
  spaceId: ID
  statusId: ID
  """
  The sort order of the [WorkItem](#workitem). Omitting this parameter will make the work item the first work item in the status column
  """
  sort: String
  memberIds: [ID!]
  watcherIds: [ID!]
  labelIds: [ID!]
  effort: String
  impact: String
  updatedAt: Date
  createdAt: Date
}

type CreateWorkItemResult {
  workItem: WorkItem!
}

input EditWorkItemInput {
  id: ID!
  title: String
  """
  The [WorkItem](#workitem) object's description as a markdown-formatted string
  """
  description: String
  spaceId: ID
  statusId: ID
  sort: String
  effort: String
  impact: String
}

type EditWorkItemResult {
  workItem: WorkItem!
}

"""
Filter used when requesting work items
"""
input StatusFilter {
  type: StatusFilterType!
  filter: [StatusType!]!
}

input AddMembersToWorkItemInput {
  id: ID!
  memberIds: [ID!]!
}

type AddMembersToWorkItemResult {
  workItem: WorkItem!
}

input RemoveMembersFromWorkItemInput {
  id: ID!
  memberIds: [ID!]!
}

type RemoveMembersFromWorkItemResult {
  workItem: WorkItem!
}

input AddWatchersToWorkItemInput {
  id: ID!
  watcherIds: [ID!]!
}

type AddWatchersToWorkItemResult {
  workItem: WorkItem!
}

input RemoveWatchersFromWorkItemInput {
  id: ID!
  watcherIds: [ID!]!
}

type RemoveWatchersFromWorkItemResult {
  workItem: WorkItem!
}

input AddLabelsToWorkItemInput {
  id: ID!
  labelIds: [ID!]!
}

type AddLabelsToWorkItemResult {
  workItem: WorkItem!
}

input RemoveLabelsFromWorkItemInput {
  id: ID!
  labelIds: [ID!]!
}

type RemoveLabelsFromWorkItemResult {
  workItem: WorkItem!
}

input CreateCommentOnWorkItemInput {
  id: ID!
  body: String!
  """
  When creating a new comment thread, omit this property. Provide this property to add to an existing thread
  """
  threadId: String
}

type CreateCommentOnWorkItemResult {
  comment: Comment!
}

input EditCommentInput {
  id: ID!
  body: String
}

type EditCommentResult {
  comment: Comment!
}

input CodeReviewRequestLinkInput {
  name: String!
  url: String!
}

input EditCodeReviewRequestInput {
  id: ID!
  links: [CodeReviewRequestLinkInput!]
}

type EditCodeReviewRequestResult {
  codeReviewRequest: CodeReviewRequest!
}

input CreateLabelInput {
  spaceId: ID!
  name: String!
  color: String
}

type CreateLabelResult {
  label: Label!
}

input CreateFeedbackInput {
  title: String!
  content: String
  processed: Boolean
  companyId: ID
  personId: ID
  ownerIds: [ID!]
  tagIds: [ID!]
  """
  When this property is provided, the created feedback will be automatically linked to the specified entities with a new insight
  """
  linkInsightToEntityIds: [ID!]
  updatedAt: Date
  createdAt: Date
}

type CreateFeedbackResult {
  feedback: Feedback!
}

input EditFeedbackInput {
  id: ID!
  title: String
  content: String
  processed: Boolean
  companyId: ID
  personId: ID
}

type EditFeedbackResult {
  feedback: Feedback!
}

input AddOwnersToFeedbackInput {
  id: ID!
  ownerIds: [ID!]!
}
type AddOwnersToFeedbackResult {
  feedback: Feedback!
}

input RemoveOwnersFromFeedbackInput {
  id: ID!
  ownerIds: [ID!]!
}
type RemoveOwnersFromFeedbackResult {
  feedback: Feedback!
}

input AddTagsToFeedbackInput {
  id: ID!
  tagIds: [ID!]!
}
type AddTagsToFeedbackResult {
  feedback: Feedback!
}

input RemoveTagsFromFeedbackInput {
  id: ID!
  tagIds: [ID!]!
}
type RemoveTagsFromFeedbackResult {
  feedback: Feedback!
}

input AddEntitiesToInsightInput {
  id: ID!
  entityIds: [ID!]!
}
type AddEntitiesToInsightResult {
  insight: Insight!
}

input RemoveEntitiesFromInsightInput {
  id: ID!
  entityIds: [ID!]!
}
type RemoveEntitiesFromInsightResult {
  insight: Insight!
}

input CreatePersonInput {
  name: String!
  email: String
  companyId: ID
}
type CreatePersonResult {
  person: Person!
}

input EditPersonInput {
  id: ID!
  name: String
  email: String
  companyId: ID
}
type EditPersonResult {
  person: Person!
}

input CreateCompanyInput {
  name: String!
  avatar: String
  domain: String
}
type CreateCompanyResult {
  company: Company!
}

input EditCompanyInput {
  id: ID!
  name: String
  avatar: String
  domain: String
}
type EditCompanyResult {
  company: Company!
}

input CreateInitiativeInput {
  title: String!
  description: String
  color: String
  effortId: String
  impactId: String

  roadmapColumnIds: [String!]

  memberIds: [String!]
  labelIds: [String!]
  workItemIds: [String!]

  archivedAt: Date
  updatedAt: Date
  createdAt: Date
}

type CreateInitiativeResult {
  initiative: Initiative!
}

input EditInitiativeInput {
  id: ID!
  title: String
  description: String
  color: String
  effortId: String
  impactId: String

  addMemberIds: [String!]
  removeMemberIds: [String!]
  addLabelIds: [String!]
  removeLabelIds: [String!]
  addWorkItemIds: [String!]
  removeWorkItemIds: [String!]
}

type EditInitiativeResult {
  initiative: Initiative!
}

input AddInitiativesToRoadmapInput {
  columnId: ID!
  initiativeIds: [ID!]!
}
type AddInitiativesToRoadmapResult {
  roadmap: Roadmap!
}

input RemoveInitiativesFromRoadmapInput {
  columnId: ID!
  initiativeIds: [ID!]!
}
type RemoveInitiativesFromRoadmapResult {
  roadmap: Roadmap!
}

type Mutation {
  createWorkItem(input: CreateWorkItemInput!): CreateWorkItemResult!
  editWorkItem(input: EditWorkItemInput!): EditWorkItemResult!
  addMembersToWorkItem(
    input: AddMembersToWorkItemInput!
  ): AddMembersToWorkItemResult!
  removeMembersFromWorkItem(
    input: RemoveMembersFromWorkItemInput!
  ): RemoveMembersFromWorkItemResult!
  addWatchersToWorkItem(
    input: AddWatchersToWorkItemInput!
  ): AddWatchersToWorkItemResult!
  removeWatchersFromWorkItem(
    input: RemoveWatchersFromWorkItemInput!
  ): RemoveWatchersFromWorkItemResult!
  addLabelsToWorkItem(
    input: AddLabelsToWorkItemInput!
  ): AddMembersToWorkItemResult!
  removeLabelsFromWorkItem(
    input: RemoveLabelsFromWorkItemInput!
  ): RemoveLabelsFromWorkItemResult!
  createCommentOnWorkItem(
    input: CreateCommentOnWorkItemInput!
  ): CreateCommentOnWorkItemResult!

  createInitiative(input: CreateInitiativeInput!): CreateInitiativeResult!
  editInitiative(input: EditInitiativeInput!): EditInitiativeResult!
  addInitiativesToRoadmap(
    input: AddInitiativesToRoadmapInput!
  ): AddInitiativesToRoadmapResult!
  removeInitiativesFromRoadmap(
    input: RemoveInitiativesFromRoadmapInput!
  ): RemoveInitiativesFromRoadmapResult!

  createFeedback(input: CreateFeedbackInput!): CreateFeedbackResult!
  editFeedback(input: EditFeedbackInput!): EditFeedbackResult!
  addOwnersToFeedback(
    input: AddOwnersToFeedbackInput!
  ): AddOwnersToFeedbackResult!
  removeOwnersFromFeedback(
    input: RemoveOwnersFromFeedbackInput!
  ): RemoveOwnersFromFeedbackResult!
  addTagsToFeedback(input: AddTagsToFeedbackInput!): AddTagsToFeedbackResult!
  removeTagsFromFeedback(
    input: RemoveTagsFromFeedbackInput!
  ): RemoveTagsFromFeedbackResult!

  createPerson(input: CreatePersonInput!): CreatePersonResult!
  editPerson(input: EditPersonInput!): EditPersonResult!
  createCompany(input: CreateCompanyInput!): CreateCompanyResult!
  editCompany(input: EditCompanyInput!): EditCompanyResult!

  addEntitiesToInsight(
    input: AddEntitiesToInsightInput!
  ): AddEntitiesToInsightResult!
  removeEntitiesFromInsight(
    input: RemoveEntitiesFromInsightInput!
  ): RemoveEntitiesFromInsightResult!

  editComment(input: EditCommentInput!): EditCommentResult!

  editCodeReviewRequest(
    input: EditCodeReviewRequestInput!
  ): EditCodeReviewRequestResult!

  createLabel(input: CreateLabelInput!): CreateLabelResult!
}
